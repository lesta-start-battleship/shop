version: "3.9"

services:
  db:
    image: postgres:15
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - shopnet

  shop:
    build:
      context: .
      dockerfile: Dockerfile
    command: /entrypoint.sh
    ports:
      - "8000:8000"
    volumes:
      - .:/code
      - static_volume:/code/staticfiles
    depends_on:
      - db
      - kafka
      - redis
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - KAFKA_BOOTSTRAP_SERVERS=37.9.53.228:9092
      - KAFKA_PRODUCT_TOPIC=shop.inventory.updates
      - KAFKA_PRODUCT_GROUP=inventory-group
    networks:
      - shopnet


  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - shopnet

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - shopnet

  saga-consumer:
    build:
      context: .
      dockerfile: Dockerfile
    command: python manage.py run_saga_consumer
    depends_on:
      - kafka
      - db
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=37.9.53.228:9092
      - KAFKA_SAGA_GROUP=saga-group
    networks:
      - shopnet

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    networks:
      - shopnet

volumes:
  postgres_data:
  static_volume:

networks:
  shopnet:
